name: Auto‑decode CTOOL

on:
  push:
    paths:
      - 'CTOOL.py.txt'
  workflow_dispatch:

jobs:
  decode:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install uncompyle6
        run: |
          python -m pip install --upgrade pip
          pip install uncompyle6

      - name: Decode & Decompile in one go
        shell: bash
        run: |
          # 1. Extract payload (strip quotes, newlines)
          PAYLOAD=$(sed -n "s/.*a85decode *( *b'\(.*\)' *).*/\1/p" CTOOL.py.txt | tr -d '\\n')
          # 2. Decode Base85 (RFC1924), fallback Ascii85
          python3 - << 'PYCODE'
import base64, bz2, zlib, marshal, importlib.util, time, struct

b = PAYLOAD = bytes.fromhex('')  # dummy, will be overwritten by shell
# Replace b with shell variable:
import os
payload = base64.b85decode(os.environ['PAYLOAD']) if True else None
try:
    data85 = base64.b85decode(os.environ['PAYLOAD'].encode())
except Exception:
    data85 = base64.a85decode(os.environ['PAYLOAD'].encode(), adobe=False, ignorechars=b'\n\r\t ')
data1 = bz2.decompress(data85)
data2 = zlib.decompress(data1)
co = marshal.loads(data2)

# write .pyc
magic = importlib.util.MAGIC_NUMBER
ts = struct.pack('<I', int(time.time()))
sz = struct.pack('<I', 0)
body = marshal.dumps(co)
with open('decoded.pyc','wb') as f:
    f.write(magic + ts + sz + body)
PYCODE

          # 3. Decompile bytecode to source
          uncompyle6 decoded.pyc > decoded_source.py

      - name: Commit decoded source
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add decoded_source.py
          git diff --quiet || git commit -m "Auto‑decode CTOOL.py.txt"
          git push
